// ARC-V Operative Dashboard – Core UI import { useState } from 'react'; import { Card, CardContent } from "@/components/ui/card"; import { Button } from "@/components/ui/button"; import { Input } from "@/components/ui/input"; import { Textarea } from "@/components/ui/textarea"; import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";

export default function ARCVTerminal() { const [codename, setCodename] = useState(""); const [login, setLogin] = useState(""); const [isLoggedIn, setIsLoggedIn] = useState(false); const [chatMessage, setChatMessage] = useState(""); const [chatLog, setChatLog] = useState([]);

const generateCodename = (name) => { const cipher = { A: "Æ", B: "ʁ", C: "Ȼ", D: "Đ", E: "Ɇ", F: "₣", G: "Ǥ", H: "Ħ", I: "Ί", J: "Ј", K: "Ҝ", L: "Ł", M: "₥", N: "Ň", O: "Ø", P: "Þ", Q: "Ϙ", R: "Я", S: "Ϟ", T: "Ŧ", U: "µ", V: "Ѵ", W: "Ш", X: "✕", Y: "¥", Z: "Ẑ" }; return name.toUpperCase().split('').map(l => cipher[l] || l).join(''); };

const handleLogin = () => { if (login.trim() === "OMEGA-ACCESS") { setIsLoggedIn(true); } };

const sendMessage = () => { if (chatMessage.trim()) { setChatLog([...chatLog, chatMessage]); setChatMessage(""); } };

if (!isLoggedIn) { return ( <div className="min-h-screen bg-black text-white flex flex-col items-center justify-center font-mono"> <h1 className="text-2xl mb-4">ARC-V SECURE LOGIN</h1> <Input className="w-64 mb-2" placeholder="Enter Access Code" onChange={(e) => setLogin(e.target.value)} /> <Button onClick={handleLogin}>Enter</Button> </div> ); }

return ( <div className="min-h-screen bg-black text-white p-6 font-mono"> <h1 className="text-3xl mb-4 tracking-widest text-center">ARC-V // OPERATIVE DASHBOARD</h1> <Tabs defaultValue="dossier" className="w-full"> <TabsList className="grid grid-cols-7 bg-gray-900 rounded-xl mb-4"> <TabsTrigger value="dossier">Operative Files</TabsTrigger> <TabsTrigger value="missions">Mission Archive</TabsTrigger> <TabsTrigger value="codename">Codename Generator</TabsTrigger> <TabsTrigger value="cipher">Cipher Tools</TabsTrigger> <TabsTrigger value="blacksites">Black Sites</TabsTrigger> <TabsTrigger value="chat">Shadowline Chat</TabsTrigger> </TabsList>

<TabsContent value="dossier">
      <Card>
        <CardContent className="p-4">
          <h2 className="text-xl mb-2">Top Operatives</h2>
          <ul className="space-y-2">
            <li>Codename: ЯÆѴɆŇ² – Strategist – Last seen: Zeta-9</li>
            <li>Codename: ₥ǤϞ³ – Handler – Last seen: Unknown</li>
            <li>Codename: ✕ĦØŁ¹ – Operative – Last seen: Eastern Corridor</li>
          </ul>
        </CardContent>
      </Card>
    </TabsContent>

    <TabsContent value="missions">
      <Card>
        <CardContent className="p-4">
          <h2 className="text-xl mb-2">Latest Mission Logs</h2>
          <p className="text-sm text-gray-400">Ϟ-X47-R13 | Region ZETA-9 | Status: Complete | Deletion in 12h</p>
          <p className="mt-2">"Communications severed. Obfuscation Protocol 9B deployed."</p>
        </CardContent>
      </Card>
    </TabsContent>

    <TabsContent value="codename">
      <Card>
        <CardContent className="p-4">
          <h2 className="text-xl mb-2">Codename Generator</h2>
          <Input placeholder="Enter name or alias" onChange={(e) => setCodename(generateCodename(e.target.value))} />
          <p className="mt-4 text-green-400">Ciphered Codename: <span className="font-bold">{codename}</span></p>
        </CardContent>
      </Card>
    </TabsContent>

    <TabsContent value="cipher">
      <Card>
        <CardContent className="p-4">
          <h2 className="text-xl mb-2">Cipher Key</h2>
          <Textarea className="h-48 bg-black text-white border border-gray-600" value={`A = Æ\nB = ʁ\nC = Ȼ\nD = Đ\nE = Ɇ\nF = ₣\nG = Ǥ\nH = Ħ\nI = Ί\nJ = Ј\nK = Ҝ\nL = Ł\nM = ₥\nN = Ň\nO = Ø\nP = Þ\nQ = Ϙ\nR = Я\nS = Ϟ\nT = Ŧ\nU = µ\nV = Ѵ\nW = Ш\nX = ✕\nY = ¥\nZ = Ẑ`} readOnly />
        </CardContent>
      </Card>
    </TabsContent>

    <TabsContent value="blacksites">
      <Card>
        <CardContent className="p-4">
          <h2 className="text-xl mb-2">Black Site Map (Redacted)</h2>
          <ul className="text-sm text-gray-300 space-y-1">
            <li>ZETA-9 // Coordinates obscured</li>
            <li>OMEGA-5 // Subterranean sector</li>
            <li>SECTOR-X // Biohazard containment hub</li>
          </ul>
        </CardContent>
      </Card>
    </TabsContent>

    <TabsContent value="chat">
      <Card>
        <CardContent className="p-4">
          <h2 className="text-xl mb-2">Shadowline Chat</h2>
          <div className="bg-gray-800 h-48 p-2 overflow-y-scroll rounded border border-gray-700 mb-2">
            {chatLog.map((msg, i) => (
              <p key={i} className="text-green-400">{msg}</p>
            ))}
          </div>
          <div className="flex gap-2">
            <Input value={chatMessage} onChange={(e) => setChatMessage(e.target.value)} placeholder="Type encoded message..." />
            <Button onClick={sendMessage}>Send</Button>
          </div>
        </CardContent>
      </Card>
    </TabsContent>
  </Tabs>
</div>

); }
